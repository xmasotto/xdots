#!/bin/bash

function kill {
    /usr/bin/kill $*
    jfix
}

# tester function
function hi {
    while sleep 1; do
	echo hi
    done
}

function make_tmp_dir {
    if [ ! -d "$1" ]; then
	echo "Creating temp dir "$1" with job_user:$JOB_USER"
	mkdir "$1"
	chmod 755 "$1"
	chown "$JOB_USER" "$1"
    fi
}

function start_job_sudo_ {
    sudo su <<EOF
    source "$HOME/.bashrc.d/job_control"
    export JOB_USER="$USER"
    export JOB_TMP_DIR="$HOME/tmp"
    make_tmp_dir "\$JOB_TMP_DIR"
    make_tmp_dir "\$JOB_TMP_DIR/jobs"
    make_tmp_dir "\$JOB_TMP_DIR/jobs/running"
    make_tmp_dir "\$JOB_TMP_DIR/jobs/finished"
    jup $*
    export JOB_TMP_DIR=""    
EOF
}

function jhelp {
    echo -e 'jup COMMAND\t run a shell command as an asynchronous job
jmon PID\t view the log of the given job
jlog PID\t edit the log of the given job (in $EDITOR)
jls\t\t get a list of running jobs
jlsd\t\t get a list of finished jobs
jclear\t\t clear the list of finished jobs'
}

# Starts the following command as a daemon, and starts a
# tail -f process to keep track of the output. The tail 
# process can be exited by keyboard interrupt, but the 
# process won't be cancelled. 
# You can view your running processes with "jls"
function jup {
    if [ "$1" == "sudo" ]; then
	shift
	start_job_sudo_ $*
    else
	[ "$JOB_USER" ] || JOB_USER="$USER"
	[ "$JOB_TMP_DIR" ] || JOB_TMP_DIR="$HOME/tmp"
	make_tmp_dir "$JOB_TMP_DIR"
	make_tmp_dir "$JOB_TMP_DIR/jobs"
	make_tmp_dir "$JOB_TMP_DIR/jobs/running"
	make_tmp_dir "$JOB_TMP_DIR/jobs/finished"

	if [ "$#" -eq "0" ]; then
	    echo "Usage: jup [sudo] COMMAND"
	    return 1
	fi

	# Show "sudo" on the my_jobs/my_jobd list
	command_prefix=""
	if [[ "$USER" != "$JOB_USER" && "$USER" == "root" ]]; then
	    command_prefix="sudo"
	fi

	(pid="$BASHPID"
	    logname="p_$pid"
	    running_log="$JOB_TMP_DIR/jobs/running/$logname"
	    finished_log="$JOB_TMP_DIR/jobs/finished/$logname"

        # don't store the logs of killed processes
	    #trap "mv $running_log $finished_log" 1 2 3 15 9

	    touch "$running_log"
	    chmod 644 "$running_log"
	    chown "$JOB_USER" "$running_log"

	    date +"%D %T" >> "$running_log"
	    echo $command_prefix $* >> "$running_log"
	    $* &>> "$running_log"
	    job_return_code=$?
	    
	    sleep 1
	    #kill -USR1 $$ &>/dev/null
	    echo "JOB_FINISHED:$job_return_code" >> "$running_log"
	    mv $running_log $finished_log &>/dev/null
	) &
	jobpid="$!"
	disown

	sleep 1

	tail -f -n +3 "$JOB_TMP_DIR/jobs/running/p_$!"

#	echo jmon "$jobpid"
# 	jmon "$jobpid"

#	tailpid="$!"
#	echo tail -f -n +3 "$JOB_TMP_DIR/jobs/running/p_$!" &

#	trap "kill -9 $tailpid" 2 3 USR1
#	wait $!
    fi
}

# View the log corresponding to the given process id.
function jmon {
    if [ -f "$HOME/tmp/jobs/running/p_$1" ]; then
	NLINES=10
	line=$(expr `wc -l "$HOME/tmp/jobs/running/p_$1" | cut -d' ' -f1` - "$NLINES")
	echo "line:$line"
	tail -n +"$line" -f "$HOME/tmp/jobs/running/p_$1"
    elif [ -f "$HOME/tmp/jobs/finished/p_$1" ]; then
	less "$HOME/tmp/jobs/finished/p_$1"
    else
	echo "Can't find Job $1";
    fi
}

# Get the log file corresponding to the given process id.
function jlog {
    if [ -f "$HOME/tmp/jobs/running/p_$1" ]; then
	$EDITOR "$HOME/tmp/jobs/running/p_$1"
    elif [ -f "$HOME/tmp/jobs/finished/p_$1" ]; then
	$EDITOR "$HOME/tmp/jobs/finished/p_$1"
    fi
}

# Get a list of your running processes.
# Shows their start time, pid, and command entered.
function jls {
    if [ -d "$HOME/tmp/jobs/running" ]; then
	for f in `ls -tr "$HOME/tmp/jobs/running"`; do
	    d=`head -n 1 "$HOME/tmp/jobs/running/$f"`
	    command=`sed -n '2p' "$HOME/tmp/jobs/running/$f"`
	    pid=`echo $f | cut -d_ -f2`
	    echo "[$d] $pid \"$command\""
	done
    fi
}

# Get a list of your finished jobs.
function jlsd {
    if [ -d "$HOME/tmp/jobs/finished" ]; then
	for f in `ls -tr "$HOME/tmp/jobs/finished"`; do
	    d=`head -n 1 "$HOME/tmp/jobs/finished/$f"`
	    command=`sed -n '2p' "$HOME/tmp/jobs/finished/$f"`
	    pid=`echo $f | cut -d_ -f2`
	    return_code=`tail -n 1 "$HOME/tmp/jobs/finished/$f" \
	| grep '^JOB_FINISHED:' | cut -d: -f2`
	    echo "[$d] $pid $return_code \"$command\""
	done
    fi
}

# Remove killed processes from the running directory.
function jfix {
    for f in `ls $HOME/tmp/jobs/running`; do
	pid="`echo $f | cut -d_ -f2`"
	if [ "`ps $pid | wc -l`" -ne 2 ]; then
	    echo "Removed $f"
	    echo "JOB_FINISHED:KILLED" >> "$HOME/tmp/jobs/running/$f"
	    mv "$HOME/tmp/jobs/running/$f" "$HOME/tmp/jobs/finished/$f"
#	    rm -f "$HOME/tmp/jobs/running/$f"
	fi
    done
}

# Deletes all of the finished job logs.
function jclear {
    jfix
    [ -d "$HOME/tmp/jobs/finished" ] && rm -rf "$HOME/tmp/jobs/finished"
}
